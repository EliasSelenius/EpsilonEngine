//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EpsilonEngine.Graphics {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Shaders {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Shaders() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("EpsilonEngine.Graphics.Shaders", typeof(Shaders).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///#version 440 core
        ///#define ShaderType
        ///
        ///
        ///
        ///#ifdef VertexShader
        ///
        ///	uniform mat4 model;
        ///	uniform mat4 view;
        ///	uniform mat4 projection;
        ///
        ///	layout (location = 0) in vec3 aPos;
        ///	layout (location = 1) in vec3 aNormal;
        ///
        ///	out vec3 FragPos;
        ///	out vec3 Normal;
        ///
        ///	void main() {
        ///		gl_Position = projection * view * model * vec4(aPos, 1.0f);
        ///		FragPos = vec3(model * vec4(aPos, 1.0));
        ///		Normal = mat3(transpose(inverse(model))) * aNormal;
        ///		//Normal = aNormal;
        ///	}
        ///#endif
        ///
        ///
        ///
        ///#ifdef FragmentShader
        ///
        ///
        ///	u [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string BasicLightShader {
            get {
                return ResourceManager.GetString("BasicLightShader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///#version 440 core
        ///#define ShaderType
        ///
        ///
        ///
        ///#ifdef VertexShader
        ///
        ///	uniform mat4 model;
        ///	uniform mat4 view;
        ///	uniform mat4 projection;
        ///
        ///	layout (location = 0) in vec3 aPos;
        ///	layout (location = 1) in vec3 aNormal;
        ///
        ///	out vec3 FragPos;
        ///	out vec3 Normal;
        ///
        ///	void main() {
        ///		gl_Position = projection * view * model * vec4(aPos, 1.0f);
        ///		FragPos = vec3(model * vec4(aPos, 1.0));
        ///		Normal = mat3(transpose(inverse(model))) * aNormal;
        ///		//Normal = aNormal;
        ///	}
        ///#endif
        ///
        ///
        ///
        ///#ifdef FragmentShader
        ///
        ///	str [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string LightShader {
            get {
                return ResourceManager.GetString("LightShader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///#version 440 core
        ///#define ShaderType
        ///
        ///
        ///
        ///#ifdef VertexShader
        ///
        ///uniform mat4 model;
        ///uniform mat4 view;
        ///uniform mat4 projection;
        ///
        ///layout (location = 0) in vec3 vPos;
        ///
        ///void main() {
        ///	gl_Position = projection * view * model * vec4(vPos, 1.0f);
        ///}
        ///#endif
        ///
        ///#ifdef FragmentShader
        ///out vec4 fragColor;
        ///void main() {
        ///	fragColor = vec4(1.0f, 0.0f, 0.0f, 1.0f);
        ///}
        ///#endif.
        /// </summary>
        internal static string Standard {
            get {
                return ResourceManager.GetString("Standard", resourceCulture);
            }
        }
    }
}
